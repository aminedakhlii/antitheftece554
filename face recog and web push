# -*- coding: utf-8 -*-
"""
Created on Tue Mar 28 20:25:55 2023

@author: antog
"""

from flask import Flask, render_template, request
import cv2
import mediapipe as mp
import pandas as pd
import os
import time
from PIL import Image
import face_recognition
from numpy import asarray

app = Flask(__name__)

# Path to the folder containing the photos
PHOTO_FOLDER = 'path/to/photo/folder'

# Function to recognize faces
def recognition(im1, known_face_encodings):
    rgb = asarray(im1)
    rgb_small_frame = rgb[:, :, ::-1]
    face_encodings = face_recognition.face_encodings(rgb_small_frame)
    for face_encoding in face_encodings:
        face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
        if face_distances[0] < .50:
            return 'It is Anto', face_distances
    return 'Its not Anto', None

# Function to save detected faces into folder
def saving_faces(array, im, frame_no, count, main_folder, known_face_encodings):
    num = 1
    if count > 0:
        for value in array:
            im1 = im.crop((value[0], value[1], value[2], value[3]))
            result, face_distances = recognition(im1, known_face_encodings)
            if face_distances:
                im1.save(main_folder + '\\faces_detected\\' + str(frame_no) + '_' + str(num) + '_image.jpg')
            num += 1

# Function to detect faces in a frame
def detector(face_detection, frame, frame_no, main_folder, known_face_encodings):
    count = 0
    array = []
    frame_no = frame_no + 1
    height, width, channel = frame.shape
    im = Image.fromarray(frame)
    color_count = im.getcolors()
    if color_count:
        print('')
    else:
        # Converting default color code BGR to RGB
        imgRGB = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Stores detected bounding box in the frame
        result = face_detection.process(imgRGB)

        # When face is detected
        try:
            for count, detection in enumerate(result.detections):
                score = detection.score
                score = int(round(score[0]*100, 2))
                box = detection.location_data.relative_bounding_box
                x, y, w, h = int(box.xmin*width), int(box.ymin * height), int(box.width*width),int(box.height*height)
                x_min, y_min, x_max, y_max = int(box.xmin*width), int(box.ymin * height), int(box.width*width+box.xmin*width),int(box.height*height+box.ymin * height)
                array.append([x_min, y_min, x_max, y_max])
            count += 1
            saving_faces(array, im, frame_no, count, main_folder, known_face_encodings)
        # When no face is detected
        except:
            print('no faces detected')
    return frame_no

# Flask route to display the detected faces
@app.route('/')
def index():
    # Get a list of all the photo files in the folder
    photo_files = [f for f in os.listdir(PHOTO_FOLDER) if os.path.isfile(os.path.join(PHOTO_FOLDER, f))]

    # Render the HTML template with the list of photo files
    return render_template('index.html', photo_files=photo_files)

# Flask route to start the face detection
@app.route('/detect_faces')
def detect_faces():
    JOSE_image = face_recognition.load_image
